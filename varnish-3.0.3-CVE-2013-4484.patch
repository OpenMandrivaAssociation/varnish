Index: bin/varnishd/cache_center.c
===================================================================
--- bin/varnishd/cache_center.c	(revision 76516d9584ba7c1baffe4049a82f13f6e841f615)
+++ bin/varnishd/cache_center.c	(revision 4bd5b7991bf602a6c46dd0d65fc04d4b8d9667a6)
@@ -1463,7 +1463,10 @@
 cnt_start(struct sess *sp)
 {
-	uint16_t done;
+	uint16_t err_code;
 	char *p;
-	const char *r = "HTTP/1.1 100 Continue\r\n\r\n";
+	const char *r_100 = "HTTP/1.1 100 Continue\r\n\r\n";
+	const char *r_400 = "HTTP/1.1 400 Bad Request\r\n\r\n";
+	const char *r_413 = "HTTP/1.1 413 Request Entity Too Large\r\n\r\n";
+	const char *r_417 = "HTTP/1.1 417 Expectation Failed\r\n\r\n";
 
 	CHECK_OBJ_NOTNULL(sp, SESS_MAGIC);
@@ -1488,8 +1491,12 @@
 
 	http_Setup(sp->http, sp->ws);
-	done = http_DissectRequest(sp);
+	err_code = http_DissectRequest(sp);
 
 	/* If we could not even parse the request, just close */
-	if (done == 400) {
+	if (err_code == 400)
+		(void)write(sp->fd, r_400, strlen(r_400));
+	else if (err_code == 413)
+		(void)write(sp->fd, r_413, strlen(r_413));
+	if (err_code != 0) {
 		sp->step = STP_DONE;
 		vca_close_session(sp, "junk");
@@ -1502,10 +1509,4 @@
 	/* Catch original request, before modification */
 	HTTP_Copy(sp->http0, sp->http);
-
-	if (done != 0) {
-		sp->err_code = done;
-		sp->step = STP_ERROR;
-		return (0);
-	}
 
 	sp->doclose = http_DoConnection(sp->http);
@@ -1518,11 +1519,12 @@
 	if (http_GetHdr(sp->http, H_Expect, &p)) {
 		if (strcasecmp(p, "100-continue")) {
-			sp->err_code = 417;
-			sp->step = STP_ERROR;
+			(void)write(sp->fd, r_417, strlen(r_417));
+			sp->step = STP_DONE;
+			vca_close_session(sp, "junk");
 			return (0);
 		}
 
 		/* XXX: Don't bother with write failures for now */
-		(void)write(sp->fd, r, strlen(r));
+		(void)write(sp->fd, r_100, strlen(r_100));
 		/* XXX: When we do ESI includes, this is not removed
 		 * XXX: because we use http0 as our basis.  Believed
Index: bin/varnishd/cache_http.c
===================================================================
--- bin/varnishd/cache_http.c	(revision 2e0cd51d8bd1fab963bc8e57d9011fb3537674f1)
+++ bin/varnishd/cache_http.c	(revision 4bd5b7991bf602a6c46dd0d65fc04d4b8d9667a6)
@@ -602,5 +602,5 @@
 
 	if (!Tlen(hp->hd[h2]))
-		return (413);
+		return (400);
 
 	/* Skip SP */
Index: bin/varnishtest/tests/r01367.vtc
===================================================================
--- bin/varnishtest/tests/r01367.vtc	(revision 4bd5b7991bf602a6c46dd0d65fc04d4b8d9667a6)
+++ bin/varnishtest/tests/r01367.vtc	(revision 4bd5b7991bf602a6c46dd0d65fc04d4b8d9667a6)
@@ -0,0 +1,30 @@
+varnishtest "blank GET"
+
+server s1 {
+	rxreq
+	txresp
+} -start
+
+varnish v1 -vcl+backend { 
+	sub vcl_error {
+		return (restart);
+	}
+} -start
+
+client c1 {
+	send "GET    \nHost: example.com\n\n"
+	rxresp
+	expect resp.status == 400
+} -run
+
+client c1 {
+	txreq -hdr "Expect: Santa-Claus"
+	rxresp
+	expect resp.status == 417
+} -run
+
+client c1 {
+	txreq
+	rxresp
+	expect resp.status == 200
+} -run
